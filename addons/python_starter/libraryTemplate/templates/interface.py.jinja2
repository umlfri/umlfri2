{% macro return_type_api_name(type) -%}
    {%- if (type.is_abstract) -%}
        None
    {%- else -%}
        '{{ type.api_name }}'
    {%- endif -%}
{%- endmacro %}

{% macro return_type(return_type, allow_nullable) -%}
    {%- if return_type.type.type_name == 'PrimitiveType' -%}
        {{- return_type.type.name -}}({% if allow_nullable %}{{ return_type.nullable }}{% endif %})
    {%- elif return_type.type.type_name == 'KeyValueType' -%}
        {%- if return_type.type.key_type.type_name == 'PrimitiveType' and return_type.type.value_type.type_name == 'PrimitiveType' -%}
            keyvalue_{{ return_type.type.key_type.name }}_{{ return_type.type.value_type.name }}({% if allow_nullable %}{{ return_type.nullable }}{% endif %})
        {%- elif return_type.type.key_type.type_name == 'PrimitiveType' -%}
            keyvalue_{{ return_type.type.key_type.name }}_object({{ return_type_api_name(return_type.type.value_type) }}{% if allow_nullable %}, {{ return_type.nullable }}{% endif %})
        {%- elif return_type.type.value_type.type_name == 'PrimitiveType' -%}
            keyvalue_object_{{ return_type.type.value_type.name }}({{ return_type_api_name(return_type.type.key_type) }}{% if allow_nullable %}, {{ return_type.nullable }}{% endif %})
        {%- else -%}
            keyvalue_object_object({{ return_type_api_name(return_type.type.key_type) }}), {{ return_type_api_name(return_type.type.value_type) }}{% if allow_nullable %}, {{ return_type.nullable }}{% endif %})
        {%- endif -%}
    {%- else -%}
        object({{ return_type_api_name(return_type.type) }}{% if allow_nullable %}, {{ return_type.nullable }}{% endif %})
    {%- endif -%}
{%- endmacro %}

{% macro interface_method(method, include_doc) %}
    def {{ method.identifier.lower_underscore_separated }}(self
{% for parameter in method.children_of_type('InterfaceMethodParameter') %}
    {% if parameter.type == '*' %}
        , *{{ parameter.identifier.lower_case }}
    {% else %}
        , {{ parameter.identifier.lower_case }}
        {% if not parameter.required %}
            = {{ repr(parameter.default) }}
        {% endif %}
    {% endif %}
{% endfor %}):
{% if method.documentation and include_doc %}
        """
        {{ method.documentation.indent(8) }}
        """
{% endif %}
        return (
            Message(self.__id, '{{ method.api_name }}')
{% for parameter in method.parameters %}
{% if parameter.type == '*' %}
                .args_parameter('{{ parameter.api_name }}', {{ parameter.identifier.lower_case }})
{% elif parameter.type.type_name == 'PrimitiveType' %}
                .{{parameter.type.name}}_parameter('{{ parameter.api_name }}', {{ parameter.identifier.lower_case }})
{% else %}
                .object_parameter('{{ parameter.api_name }}', {{ parameter.identifier.lower_case }}, {{ parameter.type.is_abstract }})
{% endif %}
{% endfor %}
{% if method.async %}
                .send_async(self.__server)
{% else %}
                .send(self.__server)
{% for exception in method.throws %}
                .throws_exception('{{ exception.exception.api_name }}', {{ exception.exception.identifier.upper_camel_case }})
{% endfor %}
                .check_unknown_exceptions()
{% if not method.return_type %}
                .return_void()
{% elif method.return_type.iterable %}
                .iterate_{{ return_type(method.return_type, False) }}
{% else %}
                .return_{{ return_type(method.return_type, True) }}
{% endif %}
{% endif %}
        )
{% endmacro %}

from ..implementation import Message, ApiProperty, ApiEvent
from ..implementation.communication import Server
{% for depend in root.referenced %}
{% if depend.type_name == 'Exception' %}
from {{ paths.get_import_path(depend, root) }} import {{ depend.identifier.upper_camel_case }}
{% endif %}
{% endfor %}
{% if root.base %}
from {{ paths.get_import_path(root.base, root) }} import {{ root.base.identifier.upper_camel_case }}
{% endif %}

class {{root.identifier.upper_camel_case}}{% if root.base %}({{ root.base.identifier.upper_camel_case }}) {% endif %}:
{% if root.documentation %}
    """
    {{ root.documentation.indent(4) }}
    """
    
{% endif %}
    def __init__(self, server, id):
{% if root.base %}
        super().__init__(server, id)
{% endif %}
        self.__server = server
        self.__id = id
    
    @property
    def __interface__(self):
        return "{{ root.api_name }}"
    
    @property
    def __id__(self):
        return self.__id
{% for method in root.children_of_type('InterfaceMethod') %}
    
{{ interface_method(method, True) }}
{% endfor %}
{% for property in root.children_of_type('InterfaceProperty') %}
    
    {{ property.identifier.lower_underscore_separated }} = ApiProperty(
        '{{ property.identifier.lower_underscore_separated }}',
        {% if property.index %}True{% else %}False{% endif %},
        {{ repr(property.documentation) }}
    )
{% for method in property.children_of_type('InterfacePropertyGetter') %}
    
    @{{property.identifier.lower_underscore_separated}}.getter
{{ interface_method(method.create_method()) }}
{% endfor %}
{% for method in property.children_of_type('InterfacePropertySetter') %}
    
    @{{property.identifier.lower_underscore_separated}}.setter
{{ interface_method(method.create_method()) }}
{% endfor %}
{% for method in property.children_of_type('InterfacePropertyIterator') %}
    
    @{{property.identifier.lower_underscore_separated}}.iterator
{{ interface_method(method.create_method()) }}
{% endfor %}
{% endfor %}
{% for event in root.children_of_type('InterfaceEvent') %}
    
    {{ event.identifier.lower_underscore_separated }} = ApiEvent(
        '{{ event.identifier.lower_underscore_separated }}',
        {{ repr(event.documentation) }}
    )
    
    @{{ event.identifier.lower_underscore_separated }}.connector
    def {{ event.identifier.lower_underscore_separated }}(self, handler):
        self.__server.connect_event(self.__id, "{{ event.name }}", "{{ event.registrar.api_name }}", handler)
    
    @{{ event.identifier.lower_underscore_separated }}.disconnector
    def {{ event.identifier.lower_underscore_separated }}(self, handler):
        self.__server.disconnect_event(self.__id, "{{ event.name }}", "{{ event.deregistrar.api_name }}", handler)
{% endfor %}
